"F value" = aov1[,3][1:15]*2/100,
"Pr(>F)" = sapply(aov1[,3][1:15]*2/100,FUN=pf,df1=1,df2=15,lower.tail=FALSE))
rownames(tab1) = rownames(anova(m))[1:15]
tab1
tab1$`F value` <- tab1$`Mean Sq`/msr
tab1$`Mean Sq`
tab1$[2]
tab1[2]
tab1[3]
tab1[3]/100
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)`<- pf(tab1$`F value`, ns$Df, dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)`<- pf(tab1$`F value`, tab1$Df, dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)`<- pf(tab1$[4], tab1$Df, dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)`<- pf(tab1[4], tab1$Df, dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)`<- sapply(tab1[4], Fun = pf,tab1$Df, dfr, lower.tail=F)
sapply(tab1[4], Fun = pf,tab1$Df, dfr, lower.tail=F)
tab1[1]
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], Fun = pf, tab1[1], dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], Fun = pf, 1, dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], Fun = pf, df1=1, df2=dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
tab1
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=tab1[1], df2=dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
tab1
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
tab1
tab1
tab1
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
tab1
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
(tab1)
rm(list = ls())
y <- c(8, 31, 79, 77, 53, 12, 73, 49, 4, 9, 68, 38, 43, 36, 8, 23)/2
a <- c(rep(-1, 8), rep(1, 8))
b <- rep(c(-1,1,-1,1),rep(4,4))
c <- rep(c(-1, 1), 8)
d <- rep(c(-1, -1, 1, 1), 4)
m <- lm(y~a*b*c*d)
#Effeccts
(estimate <- m$coefficients[-1]*2)
rm(list = ls())
y <- c(8, 31, 79, 77, 53, 12, 73, 49, 4, 9, 68, 38, 43, 36, 8, 23)/2
a <- c(rep(-1, 8), rep(1, 8))
b <- rep(c(-1,1,-1,1),rep(4,4))
c <- rep(c(-1, 1), 8)
d <- rep(c(-1, -1, 1, 1), 4)
m <- lm(y~a*b*c*d)
#Effeccts
(estimate <- m$coefficients[-1]*2)
dfr <- 15
msr <- 100
data.frame(Estimate=estimate,
LowerBound=estimate-qt(0.025/15, dfr, lower.tail=F)*sqrt(msr/8),
UpperBound=estimate+qt(0.025/15, dfr, lower.tail=F)*sqrt(msr/8))
#Calculate the analysis of variance
aov1 <- anova(m)
tab1 = data.frame(
Df = aov1$Df[1:15],
"Sum Sq" = aov1$`Sum Sq`[1:15]*2,
"Mean Sq" = aov1$`Mean Sq`[1:15]*2)
rownames(tab1) = rownames(anova(m))[1:15]
tab1
tab1$`F value` <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
tab1
tab1[4]
tab1[4][1:15]
tab1[,4]
tab1[4][1:15]
tab1[,4][1:15]
tab1[4]
tab1$"F value"" <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
(tab1)
tab1$"F value" <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
tab1
tab1$'F value' <- tab1[3]/msr
tab1$`Pr(>F)` <- sapply(tab1[4], FUN = pf, df1=1, df2=dfr, lower.tail=F)
tab1
F.value <- tab1[3]/msr
Pr(>F) <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
(tab1)
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
cbind.data.frame(tab1,F.value,p.value)
(tab1)
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
cbind(tab1,F.value,p.value)
m <- lm(y~a+b+c+d+a*b+a*c+a*d+b*c+b*d+c*d)
tab2 <- as.data.frame(anova(m))
m <- lm(y~a+b+c+d+a*b+a*c+a*d+b*c+b*d+c*d)
(tab2 <- as.data.frame(anova(m)))
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
data.frame(tab1,F.value,p.value)
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
data.frame(tab1,
"F value"=F.value,
"Pr(>F)"=p.value)
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
data.frame(tab1,
"F value"=F.value,
"Pr(>F)"=p.value)
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
data.frame(Df = aov1$Df[1:15],
"Sum Sq" = aov1$`Sum Sq`[1:15]*2,
"Mean Sq" = aov1$`Mean Sq`[1:15]*2
"F value"=F.value,
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
data.frame(Df = aov1$Df[1:15],
"Sum Sq" = aov1$`Sum Sq`[1:15]*2,
"Mean Sq" = aov1$`Mean Sq`[1:15]*2,
"F value"=F.value,
"Pr(>F)"=p.value)
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
data.frame(tab1,
"F value"=F.value,
"Pr(>F)"=p.value)
names(tab1)
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
data.frame(tab1,
"F value"=F.value,
"Pr(>F)"=p.value)
names(tab1) <- c("Df","Sum Sq","Mean Sq","F value","Pr(>F)")
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
data.frame(tab1,
"F value"=F.value,
"Pr(>F)"=p.value)
names(tab1) <- c(" ","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
tab1
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
t <- data.frame(tab1,
"F value"=F.value,
"Pr(>F)"=p.value)
names(t) <- c(" ","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
t <- data.frame(tab1,
"F value"=F.value,
"Pr(>F)"=p.value)
names(t) <- c(" ","Df","Sum Sq","Mean Sq","F value","Pr(>F)")
t
F.value <- tab1[3]/msr
p.value <- sapply(F.value, FUN = pf, df1=1, df2=dfr, lower.tail=F)
t <- data.frame(tab1,
"F value"=F.value,
"Pr(>F)"=p.value)
names(t) <- c("Df","Sum Sq","Mean Sq","F value","Pr(>F)")
t
library(MASS)
y <- c(1.4,1.2,3.6,1.2,1.5,1.4,1.5,1.6,5.0,9.0,12.0,5.4,4.2,4.4,9.3,2.8, 1.7,2.0,3.1,1.2,1.9,1.2,1.0,1.8,9.5,5.9,12.6,6.3,8.0,4.2,7.7,6.0)
A <- rep(0:1,16)
B <- rep(c(0,0,1,1),8)
C <- rep(rep(0:1,c(4,4)),4)
D <- rep(c(0,1,0,1),rep(8,4))
E <- rep(0:1,c(16,16))
m1 <- lm(y ~ A*B*C*D*E)
#The first Q-Q plot is for model coefficients, and the second Q-Q plot is for raw data.
par(mfrow=c(1,2))
qqnorm(m1$coefficients, main="Q-Q plot for coefficients") qqline(m1$coefficients)
library(MASS)
y <- c(1.4,1.2,3.6,1.2,1.5,1.4,1.5,1.6,5.0,9.0,12.0,5.4,4.2,4.4,9.3,2.8, 1.7,2.0,3.1,1.2,1.9,1.2,1.0,1.8,9.5,5.9,12.6,6.3,8.0,4.2,7.7,6.0)
A <- rep(0:1,16)
B <- rep(c(0,0,1,1),8)
C <- rep(rep(0:1,c(4,4)),4)
D <- rep(c(0,1,0,1),rep(8,4))
E <- rep(0:1,c(16,16))
m1 <- lm(y ~ A*B*C*D*E)
#The first Q-Q plot is for model coefficients, and the second Q-Q plot is for raw data.
par(mfrow=c(1,2))
qqnorm(m1$coefficients, main="Q-Q plot for coefficients")
qqline(m1$coefficients)
qqnorm(y, main="Q-Q plot for raw data")
qqline(y)
library(MASS)
y <- c(1.4,1.2,3.6,1.2,1.5,1.4,1.5,1.6,5.0,9.0,12.0,5.4,4.2,4.4,9.3,2.8, 1.7,2.0,3.1,1.2,1.9,1.2,1.0,1.8,9.5,5.9,12.6,6.3,8.0,4.2,7.7,6.0)
A <- rep(0:1,16)
B <- rep(c(0,0,1,1),8)
C <- rep(rep(0:1,c(4,4)),4)
D <- rep(c(0,1,0,1),rep(8,4))
E <- rep(0:1,c(16,16))
m1 <- lm(y ~ A*B*C*D*E)
#QQ plot
par(mfrow=c(1,2))
#model coefficients
qqnorm(m1$coefficients, main="Q-Q plot for coefficients")
qqline(m1$coefficients)
#raw data
qqnorm(y, main="Q-Q plot for raw data")
qqline(y)
m2<-lm(y~A*B*C*D*E-A:B:C:D:E)
bc1<-boxcox(m2)
(lb1<-bc1$x[which.max(bc1$y)])
if(lb1==0){z<-log(y)}else{z<-(y^lb1-1)/lb1}
mz1<-lm(z~A*B*C*D*E-A:B:C:D:E)
par(mfrow=c(1,2))
qqnorm(mz1$coefficients, main="Q-Q plot for coefficients") qqline(mz1$coefficients)
m2<-lm(y~A*B*C*D*E-A:B:C:D:E)
bc1<-boxcox(m2)
(lb1<-bc1$x[which.max(bc1$y)])
if(lb1==0){z<-log(y)}else{z<-(y^lb1-1)/lb1}
mz1<-lm(z~A*B*C*D*E-A:B:C:D:E)
par(mfrow=c(1,2))
qqnorm(mz1$coefficients, main="Q-Q plot for coefficients") qqline(mz1$coefficients)
m2<-lm(y~A*B*C*D*E-A:B:C:D:E)
bc1<-boxcox(m2)
(lb1<-bc1$x[which.max(bc1$y)])
if(lb1==0){z<-log(y)}else{z<-(y^lb1-1)/lb1}
mz1<-lm(z~A*B*C*D*E-A:B:C:D:E)
par(mfrow=c(1,2))
qqnorm(mz1$coefficients, main="Q-Q plot for coefficients")
qqline(mz1$coefficients)
qqnorm(y, main="Q-Q plot for raw data")
qqline(y)
m3<-lm(y~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E) bc2<-boxcox(m3)
m3<-lm(y~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E)
bc2<-boxcox(m3)
(lb2<-bc2$x[which.max(bc2$y)])
if(lb2==0){z<-log(y)}else{z<-(y^lb2-1)/lb2} mz2<-lm(z~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E) par(mfrow=c(1,2))
m3<-lm(y~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E)
bc2<-boxcox(m3)
(lb2<-bc2$x[which.max(bc2$y)])
if(lb2==0){z<-log(y)}else{z<-(y^lb2-1)/lb2}
mz2<-lm(z~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E) par(mfrow=c(1,2))
m3<-lm(y~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E)
bc2<-boxcox(m3)
(lb2<-bc2$x[which.max(bc2$y)])
if(lb2==0){z<-log(y)}else{z<-(y^lb2-1)/lb2}
mz2<-lm(z~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E)
par(mfrow=c(1,2))
qqnorm(mz2$coefficients, main="Q-Q plot for coefficients")
qqline(mz2$coefficients)
qqnorm(y, main="Q-Q plot for raw data")
qqline(y)
m2 <- lm(y~A*B*C*D*E-A:B:C:D:E)
bc1 <- boxcox(m2)
(lb1 <- bc1$x[which.max(bc1$y)])
if(lb1==0){z <- log(y)}else{z <- (y^lb1-1)/lb1}
mz1 <- lm(z~A*B*C*D*E-A:B:C:D:E)
par(mfrow=c(1,2))
qqnorm(mz1$coefficients, main="Q-Q plot for coefficients")
qqline(mz1$coefficients)
qqnorm(y, main="Q-Q plot for raw data")
qqline(y)
m3 <- lm(y~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E)
bc2 <- boxcox(m3)
(lb2 <- bc2$x[which.max(bc2$y)])
if(lb2==0){z <- log(y)}else{z <- (y^lb2-1)/lb2}
mz2 <- lm(z~A*B*C*D*E-A:B:C:D:E-A:B:C:D-A:B:C:E-A:B:D:E-A:C:D:E-B:C:D:E)
par(mfrow=c(1,2))
qqnorm(mz2$coefficients, main="Q-Q plot for coefficients")
qqline(mz2$coefficients)
qqnorm(y, main="Q-Q plot for raw data")
qqline(y)
anova(mz2)
exp(2.87783)
exp(2.87783-50*0.09074)
exp(-5.2344)
exp(-0.52344)
exp(0.8724)
exp(2.87783-40*0.09074)
exp(2.87783-10*0.09074)
exp(-10*0.09074-10*0.08074)
exp(10*0.09074+10*0.08074)
exp(10*0.08074)
setwd("~/Desktop/STAT628/2Body_Fat_Project/HW2/code/shiny")
rsconnect::setAccountInfo(name='zijinw97',
token='CFAD4AE1BB466D9C8E5ABFBDB9155F27',
secret='wBdLaCh7fkCMY48XAvvJBIlCnHPPcloOENTs61rU')
library(rsconnect)
getwd()
rsconnect::deployApp('/Users/oujieri/Desktop/STAT628/2Body_Fat_Project/HW2/code/shiny')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplot
?aes
data
# server.R
library(shiny)
library(shinythemes)
library(ggplot2)
bdfat <- function(ab, we, wr, h, ag, c, n, f) {
bf = 174.9061 - 1.3484*ab + 1.1144*we - 5.5715*wr - 0.4743*h - 0.9374*ag - 0.1550*c - 5.1855*n + 0.3360*f - 0.0048*ab*we + 0.0809*wr*ag + 0.0834*ab*n - 0.0052*ab*ag - 0.0159*we*n
return(round(bf, 3))
}
server <- function(input, output) {
#setwd("/Users/michael/Desktop/Fall_2019/Stat_628/")
data = read.csv("./cleandata.csv")
# Body fat part
body_fat = reactive({
ab = as.numeric(input$abdomen)
we = as.numeric(input$weight)
wr = as.numeric(input$wrist)
h = as.numeric(input$height)
ag = as.numeric(input$age)
c = as.numeric(input$chest)
n = as.numeric(input$neck)
f = as.numeric(input$forearm)
return(bdfat(ab, we, wr, h, ag, c, n, f))
})
output$bdfat_text = renderText({
if(body_fat() > 0 & body_fat() < 100) {
text = paste("The percentage of your body fat is: ")
} else {
text = paste("Something went wrong when we try to calculate your body fat percentage :( Please double check your input.")
}
return(text)
})
output$percentage = renderText({
if(body_fat() > 0 & body_fat() < 100) {
text = paste(body_fat(), "%")
} else {
text = paste("NA")
}
return(text)
})
Range = data.frame(xmin = c(0, 6, 14, 18, 25),
xmax = c(6, 14, 18, 25, 50),
ymin = -Inf, ymax = Inf,
Region= c("Essential fat 2%-5%", "Athletes 6%-13%", "Fitness 14%-17%", "Average 18%-25%","Obese 25%+"))
output$plot  = renderPlot({
if (body_fat()<100 & body_fat()>0){
ggplot(data, aes(x = BODYFAT)) +
geom_density(size = 0.5, linetype = "dashed") +
geom_rect(data = Range, inherit.aes=F, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=Region))+
scale_fill_manual("Region",values = adjustcolor(c("#99FFCC","#A35029","#82A866","#93A0CB","#2BAA92"),alpha.f = 0.3))+
xlab("Body fat percentages") + geom_vline(xintercept = body_fat(),linetype = "dashed",color="#C2151B", size=2) +
annotate(geom="text",fontface="italic", x = (body_fat()-6), y =  0.04, label = as.character(paste0(body_fat(),"%")),size = 6,color ="#C2151B") +
ggtitle("Density Plot of the Body Fat Percentage (see where you are!)") + theme_light()
}else{
NULL
}
})
output$error_text = renderText({
if (body_fat()>100 | body_fat()<0){
"Something went wrong when we try to calculate your body fat percentage :( Please double check your input."
}else{
NULL
}
})
gitlink <- a("Body Fat Project", href="https://github.com/zijinw9527/STAT628_ModuleTwo20")
output$git <- renderUI({
tagList("We'd be honor if you are interested in our work. The whole project including the data processing, modeling  and model selection has been uploaded to github. Your suggestions are welcome :", gitlink)
})
output$group = renderText("Designed by Daiyi Shi, Haoran Teng and Zijin Wang.")
output$contact = renderText("Feel free to contact us if you come across any problems while using. Email: zwang2548@wisc.edu")
}
setwd("~/Desktop/STAT628/2Body_Fat_Project/HW2/code/shiny")
getwd
getwd()
View(lsfl)
data = read.csv("./cleandata.csv")
View(data)
cle
rm(list = ls())
runApp()
# server.R
library(shiny)
library(shinythemes)
library(ggplot2)
bdfat <- function(ab, we, wr, h, ag, c, n, f) {
bf = 174.9061 - 1.3484*ab + 1.1144*we - 5.5715*wr - 0.4743*h - 0.9374*ag - 0.1550*c - 5.1855*n + 0.3360*f - 0.0048*ab*we + 0.0809*wr*ag + 0.0834*ab*n - 0.0052*ab*ag - 0.0159*we*n
return(round(bf, 3))
}
server <- function(input, output) {
#setwd("/Users/oujieri/Desktop/STAT628/2Body_Fat_Project/HW2/code/shiny")
data = read.csv("./cleandata.csv")
body_fat = reactive({
ab = as.numeric(input$abdomen)
we = as.numeric(input$weight)
wr = as.numeric(input$wrist)
h = as.numeric(input$height)
ag = as.numeric(input$age)
c = as.numeric(input$chest)
n = as.numeric(input$neck)
f = as.numeric(input$forearm)
return(bdfat(ab, we, wr, h, ag, c, n, f))
})
output$bdfat_text = renderText({
if(body_fat() > 0 & body_fat() < 100) {
text = paste("The percentage of your body fat is: ")
} else {
text = paste("Something went wrong when we try to calculate your body fat percentage :( Please double check your input.")
}
return(text)
})
output$percentage = renderText({
if(body_fat() > 0 & body_fat() < 100) {
text = paste(body_fat(), "%")
} else {
text = paste("NA")
}
return(text)
})
Range = data.frame(xmin = c(0, 6, 14, 18, 25),
xmax = c(6, 14, 18, 25, 50),
ymin = -Inf, ymax = Inf,
Region= c("Essential fat 2%-5%", "Athletes 6%-13%", "Fitness 14%-17%", "Average 18%-25%","Obese 25%+"))
output$plot  = renderPlot({
if (body_fat()<100 & body_fat()>0){
ggplot(data, aes(x = BODYFAT)) +
geom_density(size = 0.5, linetype = "dashed") +
geom_rect(data = Range, inherit.aes=F, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=Region))+
scale_fill_manual("Region",values = adjustcolor(c("#99FFCC","#A35029","#82A866","#93A0CB","#2BAA92"),alpha.f = 0.3))+
xlab("Body fat percentages") + geom_vline(xintercept = body_fat(),linetype = "dashed",color="#C2151B", size=2) +
annotate(geom="text",fontface="italic", x = (body_fat()-6), y =  0.04, label = as.character(paste0(body_fat(),"%")),size = 6,color ="#C2151B") +
ggtitle("Density Plot of the Body Fat Percentage (see where you are!)") + theme_light()
}else{
NULL
}
})
output$error_text = renderText({
if (body_fat()>100 | body_fat()<0){
"Something went wrong when we try to calculate your body fat percentage :( Please double check your input."
}else{
NULL
}
})
gitlink <- a("Body Fat Project", href="https://github.com/zijinw9527/STAT628_ModuleTwo20")
output$git <- renderUI({
tagList("We'd be honor if you are interested in our work. The whole project including the data processing, modeling  and model selection has been uploaded to github. Your suggestions are welcome :", gitlink)
})
output$group = renderText("Designed by Daiyi Shi, Haoran Teng and Zijin Wang.")
output$contact = renderText("Feel free to contact us if you come across any problems while using. Email: zwang2548@wisc.edu")
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='zijinw97',
token='CFAD4AE1BB466D9C8E5ABFBDB9155F27',
secret='wBdLaCh7fkCMY48XAvvJBIlCnHPPcloOENTs61rU')
library(rsconnect)
getwd（）
getwd()
rsconnect::deployApp("/Users/oujieri/Desktop/STAT628/2Body_Fat_Project/HW2/code/shiny")
